# Generated by Django 5.0.6 on 2024-06-20 17:43

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CityList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('countryName', models.CharField(max_length=50)),
                ('regionName', models.CharField(max_length=50)),
                ('cityName', models.CharField(max_length=50)),
                ('subway', models.BooleanField(default=False)),
                ('funicular', models.BooleanField(default=False)),
                ('monorail', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emailSeller', models.EmailField(max_length=50, unique=True)),
                ('nameSeller', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Renter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('emailRenter', models.EmailField(max_length=50, unique=True)),
                ('nameRenter', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='StreetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('streetTypeName', models.CharField(max_length=50)),
                ('streetTypeNameRus', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=50, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApartmentsList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appOwner', models.EmailField(default='', max_length=50, verbose_name='Собственник')),
                ('appStreetName', models.CharField(max_length=50, verbose_name='Улица')),
                ('appHouseNumber', models.PositiveIntegerField(default=1, verbose_name='Номер дома')),
                ('appHouseCorpusNumber', models.IntegerField(default=None, verbose_name='Корпус')),
                ('appNumber', models.PositiveIntegerField(default=1, verbose_name='Номер апартаментов')),
                ('appHouseNumberOfFloors', models.PositiveIntegerField(default=1, verbose_name='Количество этажей в доме')),
                ('appFloorNumber', models.IntegerField(default=1, verbose_name='Этаж апартаментов')),
                ('appNumberOfSquare', models.PositiveIntegerField(default=20, validators=[django.core.validators.MaxValueValidator(1000)], verbose_name='Площадь апартаментов')),
                ('appNumberOfRooms', models.PositiveIntegerField(default=1, verbose_name='Количество комнат')),
                ('appNumberOfBedrooms', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(10)], verbose_name='Количество спален')),
                ('appShortDiscription', models.CharField(max_length=100, verbose_name='Краткое описание')),
                ('appMaxGuests', models.PositiveIntegerField(default=1, validators=[django.core.validators.MaxValueValidator(40)], verbose_name='Максимальное количество гостей')),
                ('appPricePerPerson', models.PositiveIntegerField(default='', verbose_name='Цена на одного гостя')),
                ('appCityName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='rent.citylist', verbose_name='Город')),
            ],
        ),
    ]
